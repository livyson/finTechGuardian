#!/bin/bash

# Script para construir e executar o FinTechGuardian em ambiente local
# Utiliza Java 23 e Virtual Threads para m√°ximo desempenho

set -e

echo "üöÄ FinTechGuardian - Build & Run Script"
echo "========================================"

# Verificar se Java 23 est√° dispon√≠vel
check_java_version() {
    if command -v java &> /dev/null; then
        JAVA_VERSION=$(java --version 2>&1 | head -1 | cut -d' ' -f2)
        echo "üìã Java Version: $JAVA_VERSION"
        
        # Verificar se √© Java 21+ (compat√≠vel com Java 23 features)
        MAJOR_VERSION=$(echo $JAVA_VERSION | cut -d'.' -f1)
        if [ "$MAJOR_VERSION" -lt 21 ]; then
            echo "‚ùå Java 21+ √© necess√°rio (encontrado: $JAVA_VERSION)"
            exit 1
        fi
    else
        echo "‚ùå Java n√£o encontrado"
        exit 1
    fi
}

# Verificar depend√™ncias externas
check_dependencies() {
    echo "üìã Verificando depend√™ncias..."
    
    # Verificar Docker
    if command -v docker &> /dev/null; then
        echo "‚úÖ Docker encontrado"
    else
        echo "‚ùå Docker n√£o encontrado - necess√°rio para infraestrutura"
        exit 1
    fi
    
    # Verificar Docker Compose
    if command -v docker-compose &> /dev/null; then
        echo "‚úÖ Docker Compose encontrado"
    else
        echo "‚ùå Docker Compose n√£o encontrado"
        exit 1
    fi
    
    # Verificar Maven
    if command -v mvn &> /dev/null; then
        MVN_VERSION=$(mvn --version | head -1 | cut -d' ' -f3)
        echo "‚úÖ Maven encontrado (v$MVN_VERSION)"

    else
        echo "‚ùå Maven n√£o encontrado"
        exit 1
    fi
}

# Iniciar infraestrutura com Docker Compose
start_infrastructure() {
    echo "üê≥ Iniciando infraestrutura..."
    
    # Criar arquivo .env se n√£o existir
    if [ ! -f .env ]; then
        echo "üìù Criando arquivo .env..."
        cp env.example .env
        echo "‚ö†Ô∏è  Configure as senhas no arquivo .env antes de executar em produ√ß√£o"
    fi
    
    docker-compose up -d postgres mongodb redis kafka prometheus grafana
    
    echo "‚è≥ Aguardando servi√ßos ficarem dispon√≠veis..."
    
    # Aguardar PostgreSQL
    echo "üóÑÔ∏è  Aguardando PostgreSQL..."
    while ! docker-compose exec -T postgres pg_isready -U fintech_user -d fintechguardian &>/dev/null; do
        sleep 2
    done
    echo "‚úÖ PostgreSQL est√° pronto"
    
    # Aguardar Redis
    echo "üîÑ Aguardando Redis..."
    while ! docker-compose exec -T redis redis-cli ping &>/dev/null; do
        sleep 2
    done
    echo "‚úÖ Redis est√° pronto"
    
    # Aguardar Kafka
    echo "üì∫ Aguardando Kafka..."
    while ! docker-compose logs kafka | tail -20 | grep -q "started"; do
        sleep 5
    done
    echo "‚úÖ Kafka est√° pronto"
}

# Construir projeto Maven
build_project() {
    echo "üî® Construindo projeto..."
    
    # Limpar e instalar depend√™ncias compartilhadas primeiro
    echo "üì¶ Instalando bibliotecas compartilhadas..."
    mvn clean install -pl libraries/common-domain -am
    mvn clean install -pl libraries/security-lib -am
    mvn clean install -pl libraries/kafka-producers-consumers -am
    
    # Construir todos os m√≥dulos
    echo "üî® Construindo todos os m√≥dulos..."
    mvn clean install -DskipTests
    
    echo "‚úÖ Build conclu√≠do com sucesso!"
}

# Executar servi√ßos em modo desenvolvimento
run_services() {
    echo "üöÄ Iniciando servi√ßos..."
    
    # Iniciar Gateway Service em background
    echo "üåê Iniciando Gateway Service..."
    mvn spring-boot:run -pl services/gateway-service -Dspring-boot.run.profiles=dev &
    GATEWAY_PID=$!
    
    sleep 10
    
    # Verificar se Gateway est√° funcionando
    echo "üîç Verificando Gateway Service..."
    if curl -s http://localhost:8080/actuator/health &>/dev/null; then
        echo "‚úÖ Gateway Service est√° rodando em http://localhost:8080"
    else
        echo "‚ùå Gateway Service falhou ao iniciar"
        exit 1
    fi
    
    echo ""
    echo "üéâ FinTechGuardian est√° rodando!"
    echo "üìã URLs importantes:"
    echo "   üåê Gateway API: http://localhost:8080"
    echo "   üìä Swagger UI: http://localhost:8080/swagger-ui.html"
    echo "   üìà Prometheus: http://localhost:9090"
    echo "   üìä Grafana: http://localhost:3000 (admin/admin)"
    echo "   üéØ Kafka UI: http://localhost:8089"
    echo ""
    echo "Pressione Ctrl+C para parar todos os servi√ßos"
    
    # Aguardar interrup√ß√£o
    trap 'stop_services' INT
    wait
}

# Parar servi√ßos
stop_services() {
    echo ""
    echo "üõë Parando servi√ßos..."
    
    if [ ! -z "$GATEWAY_PID" ]; then
        kill $GATEWAY_PID 2>/dev/null || true
    fi
    
    # Parar infraestrutura se solicitado
    if [ "$1" = "--stop-infra" ]; then
        echo "üê≥ Parando infraestrutura..."
        docker-compose down
    fi
    
    echo "‚úÖ Todos os servi√ßos parados"
}

# Fun√ß√£o principal
main() {
    check_java_version
    check_dependencies
    
    case "${1:-run}" in
        "infra-only")
            start_infrastructure
            echo "‚úÖ Apenas infraestrutura iniciada. Execute './scripts/build-and-run.sh' para iniciar os servi√ßos."
            ;;
        "build-only")
            build_project
            ;;
        "run")
            start_infrastructure
            build_project
            run_services
            ;;
        "stop")
            stop_services --stop-infra
            ;;
        *)
            echo "Uso: $0 [infra-only|build-only|run|stop]"
            echo ""
            echo "Comandos:"
            echo "  infra-only  - Inicia apenas infraestrutura (Docker)"
            echo "  build-only  - Apenas constr√≥i o projeto"
            echo "  run         - Execu√ß√£o completa (padr√£o)"
            echo "  stop        - Para todos os servi√ßos e infraestrutura"
            exit 1
            ;;
    esac
}

# Executar fun√ß√£o principal
main "$@"
